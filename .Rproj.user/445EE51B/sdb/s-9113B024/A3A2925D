{
    "collab_server" : "",
    "contents" : "---\ntitle: \"GCA Analysis Notebook\"\nauthor: \"Bud Talbot, Derek Briggs\"\noutput:\n  html_notebook: default\n  html_document: default\n  pdf_document: default\n---\n\n##Load data\nLoad data from GCA_ALL_DATA_fa15_sp16_fa16_03302017, name the new data frame FSF_alldata (FSF = \"Fall Spring Fall\")\n```{r}\nlibrary(readr)\nFSF_alldata <- read_csv(\"C:/Users/talbotr/Desktop/Keck/FSF_alldata.csv\")\n```\n\n##Subset data\nThis code subsets GCA pre and post responses from FSF all data- including cl, Sex and ethnicity codes\n```{r}\nGCA_prepost <- subset(FSF_alldata, select=c(StudentID, Semester, cl, Pre1:Post25, Sex:Demo4White5))\n```\n\n\nUse lapply to find means of all GCA pre and post item responses and write to new list. Also need to do some basic item-total correlations here. This code is not implemented yet\n```{r}\nGCA_item_Means <- lapply(3:52, mean)\n```\n\n##Calculate GCA Pre and Post total scores\nThis code calculates GCA pre and post total scores for each case adds the new vars to  FSF_alldata\n```{r}\nPre_tot <- rowSums(GCA_prepost[4:28], na.rm = TRUE)\nPost_tot <- rowSums(GCA_prepost[29:53], na.rm = TRUE)\nGCA_prepost$Pre_tot <- Pre_tot\nGCA_prepost$Post_tot <- Post_tot\n```\n\n##Calculate raw gain and <g>\nThis code calculates raw gain and <g> for each case and appends the new vars to FSF_alldata\n```{r}\nraw_gain <- (GCA_prepost[62] - GCA_prepost[61])\nnorm_gain <- raw_gain/(25 - GCA_prepost[61]) \nGCA_prepost$gain <- raw_gain\nGCA_prepost$norm_gain <- norm_gain\n```\nCould follow this up with some scatterplots or histograms of gains within each class\n\n\n##Filter and calculate class <g> and ES\nNow filter (using dplyr) FSF_alldata for cl = 1 and Semester = Fa2015 from GCA_prepost, then calculate ES and g (based on averaging GCA pre and psot scores- not based on averaging individual <g> and ES) for this class (class 1 from Fall 2015). \n```{r}\nlibrary(dplyr)\ncl1f15 <- filter(GCA_prepost, Semester==\"Fa2015\", cl==1)\ncl1f15_ES <- (mean(cl1f15$Post_tot, na.rm = TRUE) - mean(cl1f15$Pre_tot, na.rm = TRUE))/sd(cl1f15$Pre_tot, na.rm = TRUE)\ncl1f15_g <- (mean(cl1f15$Post_tot, na.rm = TRUE) - mean(cl1f15$Pre_tot, na.rm = TRUE))/(25-mean(cl1f15$Pre_tot, na.rm = TRUE))\ncl1f15gains <- c(cl1f15_ES, cl1f15_g)\nprint(cl1f15gains)\n```\n\nNOTE ON ABOVE: CHANGE <g> TO NORM CHANGE c ONCE THE FUNCTION IS WORKING PROPERLY\n\nI need to make the above code a function and then use lapply(?) to iterate over all classes and Semesters, or just increment and loop it over and over. Then write each resulting vector (e.g. cl1f15gains) to a new table. Thoughts on how to code that nicely?\n\n\n##Plot histogram of pre and post GCA for a class\nPlot a histogram of class 1 Fall 2015 pre and post GCA scores\n```{r}\nlibrary(ggplot2)\nlibrary(RColorBrewer)\ndf <-  data.frame(x = cl1f15$Pre_tot, x2 = cl1f15$Post_tot)\n\ng <-  ggplot(df, aes(x)) + geom_histogram(aes(x = x, y = ..count..),\n                  binwidth = 1, color=\"black\", fill=\"blue\", alpha=0.5) + \n  geom_histogram( aes(x = x2, y = -..count..), \n                  binwidth = 1, color=\"black\", fill= \"green\", alpha=0.5) +\n  scale_x_continuous(name = \"GCA Pre/Post Score\", \n                     limits=c(0, 25)) +\n  scale_y_continuous(name = \"Count\") +\n  ggtitle(\"Class 1 Fall 2015 GCA Pre and Post Scores\")\nprint(g)\n```\n\nOr this if we don't want the post distribution inverted\n```{r}\ng2 <-  ggplot(df, aes(x)) + geom_histogram(aes(x = x, y = ..count..),\n                  binwidth = 1, color=\"black\", fill=\"blue\", alpha=0.5) + \n  geom_histogram( aes(x = x2, y = ..count..), \n                  binwidth = 1, color=\"black\", fill= \"green\", alpha=0.5) +\n  scale_x_continuous(name = \"GCA Pre/Post Score\", \n                     limits=c(0, 25)) +\n  scale_y_continuous(name = \"Count\") +\n  ggtitle(\"Class 1 Fall 2015 GCA Pre and Post Scores\")\nprint(g2)\n```\n\n\n##Local item <g> and ES\nNext we need to calculate pre and post totals and gains (<g>, ES) for the local items for each class (note that this will *not* be for Fa15 or Sp16, only Fa16 and Sp17). \n\n##GCA and local gain scores by learning goals\nThen we need to code new vars for GCA and local items grouped by learning goal, and find gains for these item groupings.\n\n##Initial Factor Analysis exploration of GCA data. \nThe X1516GCA_FA data set is all Fall 15 and Spring 16 pre and post GCA scores imported. First look at corPlot:\n\n```{r}\nlibrary(psych)\nlibrary(GPArotation)\ncorPlot(X1516GCA_FA)\n```\n\nrun a parallel analysis to determine number of factors\n\n```{r}\nfa.parallel((X1516GCA_FA))\n```\n\nrun PCA with 4 factors, no rotation\n\n```{r}\nprincipal(X1516GCA_FA, nfactors=4, rotate = \"none\")\n```\n\n\nHow does that compare to a Factor analysis? Now run factor analysis specifying 4 factors (based on scree plot), default rotation (oblimin), do not umpute values for missing, use minimum residual factoring method (default) and view loading matrix\n\n```{r}\nfa(X1516GCA_FA, nfactors = 4)\n```\n\nmake scree plot\n\n```{r}\nscree(X1516GCA_FA, factors=TRUE)\n```\n\n\n",
    "created" : 1491520299592.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3060418670",
    "id" : "A3A2925D",
    "lastKnownWriteTime" : 1495045186,
    "last_content_update" : 1495045186719,
    "path" : "C:/Users/talbotr/Desktop/Keck/GCA_notebook.Rmd",
    "project_path" : "GCA_notebook.Rmd",
    "properties" : {
        "chunk_output_type" : "inline",
        "docOutlineVisible" : "0",
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}